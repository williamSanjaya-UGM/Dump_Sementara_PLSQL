SELECT * FROM FOOD_BEVERAGES_INFO;
SELECT * FROM CUST_MAST_ORDER;
SELECT * FROM CUST_DETAIL_ORDER;
SELECT * FROM REST_DETAIL_INVENTORY;

CREATE OR REPLACE TYPE ORDER_LIST AS OBJECT(
    FOOD_NAME VARCHAR2(25),
    FOOD_QTY NUMERIC,
    MEMBER FUNCTION GET_FOOD_ID RETURN NUMERIC,
    MEMBER FUNCTION COUNT_SUBTOTAL RETURN NUMERIC
);

CREATE OR REPLACE TYPE BODY ORDER_LIST AS
    MEMBER FUNCTION GET_FOOD_ID RETURN NUMERIC IS
        V_FOOD_ID NUMERIC;
    BEGIN
        SELECT ID INTO V_FOOD_ID FROM FOOD_BEVERAGES_INFO WHERE NAME=SELF.FOOD_NAME;
        RETURN V_FOOD_ID;
    END GET_FOOD_ID;
    MEMBER FUNCTION COUNT_SUBTOTAL RETURN NUMERIC IS
        FOOD_INFO_ID NUMERIC;
        FOOD_PRICE NUMERIC;
    BEGIN
        SELECT ID,PRICE INTO FOOD_INFO_ID,FOOD_PRICE FROM FOOD_BEVERAGES_INFO WHERE NAME=SELF.FOOD_NAME;
        RETURN FOOD_PRICE * SELF.FOOD_QTY;
    END COUNT_SUBTOTAL;
END;

SET SERVEROUTPUT ON
CREATE OR REPLACE TYPE ORDER_ARR IS VARRAY(4) OF ORDER_LIST;

DECLARE
    I_ORDER ORDER_LIST:=ORDER_LIST('BAKMI S',7);
    V_ORDER ORDER_ARR:=ORDER_ARR();
BEGIN
    V_ORDER.EXTEND(1);
    V_ORDER(1):=I_ORDER;
--    V_ORDER(2):=ORDER_LIST('MIE',2);
--    V_ORDER(3):=ORDER_LIST('FU YUNG HAI',3);
    INSERT_ORDER(V_ORDER);
END;

CREATE OR REPLACE PROCEDURE INSERT_ORDER(
    I_ORR_ARR IN ORDER_ARR
)AS
BEGIN
    FOR I IN 1..I_ORR_ARR.COUNT LOOP
        DBMS_OUTPUT.PUT_LINE(I_ORR_ARR(I).FOOD_NAME);
    END LOOP;
END;

CREATE OR REPLACE PROCEDURE GROUPING_ORDER_FIXED(
    MAST_ID IN NUMERIC,
    ORDER1 IN ORDER_LIST,
    ORDER2 IN ORDER_LIST,
    ORDER3 IN ORDER_LIST,
    ORDER4 IN ORDER_LIST
)AS
    V_ORD_ARR ORDER_ARR:=ORDER_ARR();
BEGIN
    V_ORD_ARR.EXTEND(4);
    V_ORD_ARR(1):=ORDER1;
    V_ORD_ARR(2):=ORDER2;
    V_ORD_ARR(3):=ORDER3;
    V_ORD_ARR(4):=ORDER4;
    FOR I IN 1..V_ORD_ARR.COUNT LOOP
        INSERT INTO CUST_DETAIL_ORDER(MAST_ORDER_ID,FOOD_ID,QTY,SUBTOTAL) VALUES
        (MAST_ID,V_ORD_ARR(I).GET_FOOD_ID(),V_ORD_ARR(I).FOOD_QTY,V_ORD_ARR(I).COUNT_SUBTOTAL());
        COMMIT;
    END LOOP;
END;

EXECUTE ADD_ORDERS('MEJA GRANIT 3',NULL,ORDER_LIST('MIE AYAM',3),ORDER_LIST('BUBUR POLOS',3),ORDER_LIST('ES TEH',4),ORDER_LIST('NASI PUTIH',2));

CREATE OR REPLACE PROCEDURE ADD_ORDERS(
    TABLE_NAME IN VARCHAR2,
    I_CUST_NAME IN VARCHAR2,
    ORDER1 IN ORDER_LIST,
    ORDER2 IN ORDER_LIST,
    ORDER3 IN ORDER_LIST,
    ORDER4 IN ORDER_LIST
)AS
V_TABLE_ID NUMERIC;
GET_TIMESTAMP TIMESTAMP;
V_ORDER_ID NUMERIC;
BEGIN
    IF TABLE_NAME IS NOT NULL THEN
        SELECT ID INTO V_TABLE_ID FROM REST_DETAIL_INVENTORY WHERE INVT_NAME=TABLE_NAME;
        GET_TIMESTAMP:=CURRENT_TIMESTAMP;
        INSERT INTO CUST_MAST_ORDER(TABLE_ID,ORDER_AT,DATE_INPUT)
            VALUES(V_TABLE_ID,GET_TIMESTAMP,SYSDATE);
        COMMIT;
        
        SELECT ORDER_ID INTO V_ORDER_ID FROM CUST_MAST_ORDER WHERE ORDER_AT=GET_TIMESTAMP;
        GROUPING_ORDER_FIXED(V_ORDER_ID,ORDER1,ORDER2,ORDER3,ORDER4);
    ELSE
        GET_TIMESTAMP:=CURRENT_TIMESTAMP;
        INSERT INTO CUST_MAST_ORDER(CUST_NAME,ORDER_AT,DATE_INPUT)
            VALUES(I_CUST_NAME,CURRENT_TIMESTAMP,SYSDATE);
        COMMIT;
        
        SELECT ORDER_ID INTO V_ORDER_ID FROM CUST_MAST_ORDER WHERE ORDER_AT=GET_TIMESTAMP;
        GROUPING_ORDER_FIXED(V_ORDER_ID,ORDER1,ORDER2,ORDER3,ORDER4);
    END IF;
END;

CREATE OR REPLACE PROCEDURE INSERT_ORDER(
    FOOD_NAME IN VARCHAR2,
    FOOD_QTY IN NUMBER
)AS
V_ORDER ORDER_ARR:=ORDER_ARR(ORDER_LIST(FOOD_NAME,FOOD_QTY));
BEGIN
    DBMS_OUTPUT.PUT_LINE(V_ORDER(1).FOOD_NAME);
END;

EXECUTE INSERT_ORDER('BAKMI JAWA',3);

DECLARE
    V_ORDER ORDER_ARR:=ORDER_ARR();
BEGIN
    V_ORDER.EXTEND(3);
    V_ORDER(1):=ORDER_LIST('BAKMI',7);
    V_ORDER(2):=ORDER_LIST('MIE',2);
    V_ORDER(3):=ORDER_LIST('FU',3);
    FOR I IN 1..V_ORDER.COUNT LOOP
         DBMS_OUTPUT.PUT_LINE(V_ORDER(I).FOOD_NAME);
    END LOOP;
END;

DECLARE
    V_ORDER ORDER_ARR:=ORDER_ARR(ORDER_LIST('CAKWE',4));
BEGIN
        DBMS_OUTPUT.PUT_LINE(V_ORDER(1).FOOD_NAME);
END;

CREATE OR REPLACE PROCEDURE JAVA_TEST_CALL_CHECK_INFO_LOC(
    I_SECTOR_NAME IN VARCHAR2, 
    I_DATE IN VARCHAR2,
    PASSED_CURSOR OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN PASSED_CURSOR FOR
        SELECT INV.ID,INV.INVT_NAME,SECTOR_NAME
        FROM REST_DETAIL_INFO INF
        JOIN REST_DETAIL_INVENTORY INV
        ON INV.SECTOR_ID=INF.ID
        WHERE INF.SECTOR_NAME=I_SECTOR_NAME AND TRUNC(INV.PURCHASED_AT)=I_DATE;
END;

DECLARE
    I_DATE VARCHAR2(30):='12-MAY-2021';
    BLOCK_NAME VARCHAR2(25):='BLOCK A';
    OUT_CURSOR SYS_REFCURSOR;
    V_ID NUMERIC;
    V_INV_NAME VARCHAR2(25);
    V_SECTOR_NAME VARCHAR2(25);
BEGIN
    JAVA_TEST_CALL_CHECK_INFO_LOC(BLOCK_NAME,I_DATE,OUT_CURSOR);
    LOOP
        FETCH OUT_CURSOR INTO V_ID,V_INV_NAME,V_SECTOR_NAME;
        EXIT WHEN OUT_CURSOR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(V_ID||' '||V_INV_NAME||' '||V_SECTOR_NAME);
    END LOOP;
    CLOSE OUT_CURSOR;
END;

SELECT * FROM CUST_DETAIL_PAYMENT;
SELECT * FROM CUST_MAST_ORDER;
SELECT * FROM EMP_HR;
SELECT * FROM CUST_ORDER_PAYMENT;
SELECT * FROM REST_DETAIL_INVENTORY;

CREATE OR REPLACE PROCEDURE MAKE_PAYMENT(
    CASHIER_NIK IN VARCHAR2,
    I_PAYMENT_METHOD IN VARCHAR2,
    I_TOTAL_PURCHASED IN DECIMAL,
    I_PAID_AMOUNT IN DECIMAL,
    I_TABLE_NAME IN VARCHAR2
)AS
    V_ORDER_ID NUMERIC;
    V_TOTAL DECIMAL;
    V_EMP_ID NUMERIC;
    GET_CURRENT_TIMESTAMP TIMESTAMP;
    V_TRANSACTION_ID NUMERIC;
BEGIN
    SELECT ORDER_ID, SUM(SUBTOTAL) INTO V_ORDER_ID,V_TOTAL
    FROM CUST_MAST_ORDER MO
    JOIN CUST_DETAIL_ORDER DO ON DO.MAST_ORDER_ID=MO.ORDER_ID
    JOIN REST_DETAIL_INVENTORY ON MO.TABLE_ID=REST_DETAIL_INVENTORY.ID
    WHERE INVT_NAME=I_TABLE_NAME AND PAYMENT_STATUS='UNCOMPLETED'
    GROUP BY ORDER_ID;
    
    SELECT ID INTO V_EMP_ID FROM EMP_HR WHERE NIK=CASHIER_NIK;
    GET_CURRENT_TIMESTAMP:=CURRENT_TIMESTAMP;
        INSERT INTO CUST_DETAIL_PAYMENT(PIC_CASHIER,PAYMENT_METHOD,PAID_AMOUNT,PAID_ON,TOTAL_PURCHASED,TOTAL_MONEY_RETURN)
        VALUES(V_EMP_ID,I_PAYMENT_METHOD,I_PAID_AMOUNT,GET_CURRENT_TIMESTAMP,I_TOTAL_PURCHASED,I_PAID_AMOUNT-I_TOTAL_PURCHASED);
        COMMIT;
        
        INSERT INTO CUST_ORDER_PAYMENT(TRANSACTION_ID,ORDER_ID,PAID_ON)
        SELECT TRANSACTION_ID,V_ORDER_ID, PAID_ON
        FROM CUST_DETAIL_PAYMENT WHERE PAID_ON=GET_CURRENT_TIMESTAMP;
        COMMIT;
        
        IF (V_TOTAL=I_PAID_AMOUNT OR V_TOTAL<I_PAID_AMOUNT) THEN
            UPDATE CUST_MAST_ORDER SET PAYMENT_STATUS='COMPLETED'
            WHERE ORDER_ID=V_ORDER_ID;
            COMMIT;
        END IF;
    EXCEPTION 
        WHEN NO_DATA_FOUND
        THEN
            DBMS_OUTPUT.PUT_LINE('SORRY ORDER ID NOT FOUND');
END;

EXECUTE MAKE_PAYMENT('111111','CASH',34000,36000,'MEJA GRANIT 3');