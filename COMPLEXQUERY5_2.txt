CREATE OR REPLACE TYPE ORDER_LIST AS OBJECT(
    FOOD_NAME VARCHAR2(25),
    FOOD_QTY NUMERIC,
    MEMBER FUNCTION GET_FOOD_ID RETURN NUMERIC,
    MEMBER FUNCTION COUNT_SUBTOTAL RETURN NUMERIC
);

CREATE OR REPLACE TYPE BODY ORDER_LIST AS
    MEMBER FUNCTION GET_FOOD_ID RETURN NUMERIC IS
        V_FOOD_ID NUMERIC;
    BEGIN
        SELECT ID INTO V_FOOD_ID FROM FOOD_BEVERAGES_INFO WHERE NAME=SELF.FOOD_NAME;
        RETURN V_FOOD_ID;
    END GET_FOOD_ID;
    MEMBER FUNCTION COUNT_SUBTOTAL RETURN NUMERIC IS
        FOOD_PRICE NUMERIC;
    BEGIN
        SELECT PRICE INTO FOOD_PRICE FROM FOOD_BEVERAGES_INFO WHERE NAME=SELF.FOOD_NAME;
        RETURN FOOD_PRICE * SELF.FOOD_QTY;
    END COUNT_SUBTOTAL;
END;

CREATE OR REPLACE TYPE ORDER_ARR IS VARRAY(4) OF ORDER_LIST;

CREATE OR REPLACE PROCEDURE GROUPING_ORDER_FIXED(
    MAST_ID IN NUMERIC,
    I_ORDER_ARR IN ORDER_ARR
)AS
    V_ORD_ARR ORDER_ARR:=I_ORDER_ARR;
BEGIN
    FORALL I IN 1..V_ORD_ARR.COUNT
        INSERT INTO CUST_DETAIL_ORDER(MAST_ORDER_ID,FOOD_ID,QTY,SUBTOTAL) VALUES
        (MAST_ID,V_ORD_ARR(I).GET_FOOD_ID(),V_ORD_ARR(I).FOOD_QTY,V_ORD_ARR(I).COUNT_SUBTOTAL());
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE CHECK_PAYMENT_UNCOMPLETED(
    TABLE_NAME IN VARCHAR2,
    VARR_ORDER IN ORDER_ARR
)AS
V_TABLE_ID NUMERIC;
GET_TIMESTAMP TIMESTAMP;
V_ORDER_ID NUMERIC;
BEGIN
    SELECT ID INTO V_TABLE_ID
        FROM CUST_MAST_ORDER
        JOIN REST_DETAIL_INVENTORY ON ID=TABLE_ID
        WHERE INVT_NAME=TABLE_NAME AND PAYMENT_STATUS='UNCOMPLETED';
        DBMS_OUTPUT.PUT_LINE('PLEASE FINISH YOUR PAYMENT');
    EXCEPTION
        WHEN NO_DATA_FOUND
        THEN
            GET_TIMESTAMP:=CURRENT_TIMESTAMP;
            INSERT INTO CUST_MAST_ORDER(TABLE_ID,ORDER_AT,DATE_INPUT)
                SELECT ID,GET_TIMESTAMP,SYSDATE
                FROM REST_DETAIL_INVENTORY WHERE INVT_NAME=TABLE_NAME;
            COMMIT;

            SELECT ORDER_ID INTO V_ORDER_ID FROM CUST_MAST_ORDER WHERE ORDER_AT=GET_TIMESTAMP;
            GROUPING_ORDER_FIXED(V_ORDER_ID,VARR_ORDER);
END;

CREATE OR REPLACE PROCEDURE ADD_ORDERS(
    TABLE_NAME IN VARCHAR2,
    I_CUST_NAME IN VARCHAR2,
    VARR_ORDER IN ORDER_ARR
)AS
GET_TIMESTAMP TIMESTAMP;
V_ORDER_ID NUMERIC;
BEGIN
    IF TABLE_NAME IS NOT NULL THEN
        CHECK_PAYMENT_UNCOMPLETED(TABLE_NAME,VARR_ORDER);

    ELSE
        GET_TIMESTAMP:=CURRENT_TIMESTAMP;
        INSERT INTO CUST_MAST_ORDER(CUST_NAME,ORDER_AT,DATE_INPUT) VALUES(I_CUST_NAME,CURRENT_TIMESTAMP,SYSDATE);
        COMMIT;

        SELECT ORDER_ID INTO V_ORDER_ID FROM CUST_MAST_ORDER WHERE ORDER_AT=GET_TIMESTAMP;
        GROUPING_ORDER_FIXED(V_ORDER_ID,VARR_ORDER);
    END IF;
END;

EXECUTE MAKE_PAYMENT('111111','CASH',34000,36000,'MEJA GRANIT 3');
EXECUTE ADD_ORDERS('MEJA GRANIT 3',NULL,ORDER_ARR(ORDER_LIST('MIE AYAM',3),ORDER_LIST('BUBUR POLOS',3),ORDER_LIST('ES TEH',4),ORDER_LIST('NASI PUTIH',2)));

CREATE OR REPLACE TYPE ORDER_TAB IS TABLE OF ORDER_LIST;

CREATE OR REPLACE PROCEDURE NESTED_TAB_ORDER(
    MAST_ID IN NUMERIC,
    I_ORDER_TAB IN ORDER_TAB
)AS
BEGIN
    FORALL I IN 1..I_ORDER_TAB.COUNT
        INSERT INTO CUST_DETAIL_ORDER(MAST_ORDER_ID,FOOD_ID,QTY,SUBTOTAL) VALUES
        (MAST_ID,I_ORDER_TAB(I).GET_FOOD_ID(),I_ORDER_TAB(I).FOOD_QTY,I_ORDER_TAB(I).COUNT_SUBTOTAL());
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE CHECK_PAYMENT_UNCOMPLETED_TAB(
    TABLE_NAME IN VARCHAR2,
    TAB_ORDER IN ORDER_TAB
)AS
V_TABLE_ID NUMERIC;
GET_TIMESTAMP TIMESTAMP;
V_ORDER_ID NUMERIC;
BEGIN
    SELECT ID INTO V_TABLE_ID
        FROM CUST_MAST_ORDER
        JOIN REST_DETAIL_INVENTORY ON ID=TABLE_ID
        WHERE INVT_NAME=TABLE_NAME AND PAYMENT_STATUS='UNCOMPLETED';
        DBMS_OUTPUT.PUT_LINE('PLEASE FINISH YOUR PAYMENT');
    EXCEPTION
        WHEN NO_DATA_FOUND
        THEN
            GET_TIMESTAMP:=CURRENT_TIMESTAMP;
            INSERT INTO CUST_MAST_ORDER(TABLE_ID,ORDER_AT,DATE_INPUT)
                SELECT ID,GET_TIMESTAMP,SYSDATE
                FROM REST_DETAIL_INVENTORY WHERE INVT_NAME=TABLE_NAME;
            COMMIT;

            SELECT ORDER_ID INTO V_ORDER_ID FROM CUST_MAST_ORDER WHERE ORDER_AT=GET_TIMESTAMP;
            NESTED_TAB_ORDER(V_ORDER_ID,TAB_ORDER);
END;

CREATE OR REPLACE PROCEDURE ADD_ORDERS_T(
    TABLE_NAME IN VARCHAR2,
    I_CUST_NAME IN VARCHAR2,
    TAB_ORDER IN ORDER_TAB
)AS
GET_TIMESTAMP TIMESTAMP;
V_ORDER_ID NUMERIC;
BEGIN
    IF TABLE_NAME IS NOT NULL THEN
        CHECK_PAYMENT_UNCOMPLETED_TAB(TABLE_NAME,TAB_ORDER);

    ELSE
        GET_TIMESTAMP:=CURRENT_TIMESTAMP;
        INSERT INTO CUST_MAST_ORDER(CUST_NAME,ORDER_AT,DATE_INPUT) VALUES(I_CUST_NAME,CURRENT_TIMESTAMP,SYSDATE);
        COMMIT;

        SELECT ORDER_ID INTO V_ORDER_ID FROM CUST_MAST_ORDER WHERE ORDER_AT=GET_TIMESTAMP;
        NESTED_TAB_ORDER(V_ORDER_ID,TAB_ORDER);
    END IF;
END;

SELECT * FROM CUST_MAST_ORDER;
SELECT * FROM REST_DETAIL_INVENTORY;

EXECUTE CASHIER_ABSENT('222222','POS 2');
EXECUTE MAKE_PAYMENT('222222','CASH',34000,36000,'MEJA GRANIT 4');
EXECUTE ADD_ORDERS_T('MEJA GRANIT 4',NULL,ORDER_TAB(ORDER_LIST('MIE AYAM',3),ORDER_LIST('BUBUR POLOS',3),ORDER_LIST('ES TEH',1),ORDER_LIST('NASI PUTIH',1)));

CREATE OR REPLACE TYPE CHECK_TAX AS OBJECT(
    TOTAL_PURCHASED DECIMAL,
    PB1_TAX DECIMAL,
    SERVICE_TAX DECIMAL,
    CONSTRUCTOR FUNCTION CHECK_TAX(T_PURCHASED DECIMAL) RETURN SELF AS RESULT,
    MEMBER PROCEDURE COUNT_PB1_TAX ,
    MEMBER FUNCTION COUNT_SERVICE_TAX RETURN DECIMAL,
    MEMBER FUNCTION COUNT_TOTAL_MUST_PAID RETURN DECIMAL
);

CREATE OR REPLACE TYPE BODY CHECK_TAX AS
    CONSTRUCTOR FUNCTION CHECK_TAX(T_PURCHASED DECIMAL)
    RETURN SELF AS RESULT IS
    BEGIN
        SELF.TOTAL_PURCHASED:=T_PURCHASED;
        SELF.PB1_TAX:=2;
        SELF.SERVICE_TAX:=3;
    RETURN;
    END CHECK_TAX;
    MEMBER PROCEDURE COUNT_PB1_TAX IS
    BEGIN
         DBMS_OUTPUT.PUT_LINE('TAX: '|| TOTAL_PURCHASED*SELF.PB1_TAX);
    END COUNT_PB1_TAX;
    MEMBER FUNCTION COUNT_SERVICE_TAX RETURN DECIMAL IS
    BEGIN
        RETURN TOTAL_PURCHASED*SERVICE_TAX;
    END COUNT_SERVICE_TAX;
    MEMBER FUNCTION COUNT_TOTAL_MUST_PAID RETURN DECIMAL IS
    BEGIN
        RETURN TOTAL_PURCHASED+TOTAL_PURCHASED*PB1_TAX+COUNT_SERVICE_TAX();
    END COUNT_TOTAL_MUST_PAID;
END;

DECLARE
    V_CHECK_TAX CHECK_TAX;
BEGIN
    V_CHECK_TAX:= CHECK_TAX(20000);
    V_CHECK_TAX.COUNT_PB1_TAX;
--    CHECK_TAX.COUNT_SERVICE_TAX;
    DBMS_OUTPUT.PUT_LINE('DARI FUNC* TOT: '||V_CHECK_TAX.COUNT_TOTAL_MUST_PAID());
END;

CREATE TABLE TEST_ORDER_LIST OF ORDER_LIST;
INSERT INTO TEST_ORDER_LIST(FOOD_NAME,FOOD_QTY) VALUES('KAMBING GULING',3);
SELECT * FROM TEST_ORDER_LIST;

CREATE TABLE TEST_CHECK_TAX(TOTAL_PURCHASED NUMERIC,CUST_NAME VARCHAR2(20), ITAX CHECK_TAX);
INSERT INTO TEST_CHECK_TAX VALUES(25000,'JOHNNY',CHECK_TAX(25000));
COMMIT;
SELECT T.ITAX.COUNT_TOTAL_MUST_PAID() FROM TEST_CHECK_TAX T;
UPDATE TEST_CHECK_TAX T SET T.ITAX.TOTAL_PURCHASED=20000 WHERE CUST_NAME='JOHNNY';
COMMIT;

SELECT * FROM CUST_MAST_ORDER;
SELECT * FROM CASHIER_POS_RECORD;

CREATE OR REPLACE PROCEDURE GET_MONEY_INPOSID_USEDBY_AT(
    EMP_NIK IN VARCHAR2,
    I_DATE IN VARCHAR2
)AS
TYPE REC_POS_MONEY IS RECORD(POS_NAME VARCHAR2(25),TOT_PURCHASED NUMERIC);
V_POS_MONEY REC_POS_MONEY;
BEGIN
    SELECT INVT_NAME, SUM(TOTAL_PURCHASED) INTO V_POS_MONEY
    FROM CUST_DETAIL_PAYMENT DP
    JOIN EMP_HR HR ON HR.ID=DP.PIC_CASHIER
    JOIN CASHIER_POS_RECORD CPR ON CPR.CASHIER_ID=HR.ID
    JOIN REST_DETAIL_INVENTORY RDI ON RDI.ID=CPR.POS_ID
    WHERE HR.NIK=EMP_NIK AND TRUNC(DP.PAID_ON)=I_DATE
    GROUP BY INVT_NAME;
        DBMS_OUTPUT.PUT_LINE('POS MACHINE:'||V_POS_MONEY.POS_NAME||' '||'TOT_MONEY:'||V_POS_MONEY.TOT_PURCHASED);
    EXCEPTION
    WHEN NO_DATA_FOUND
        THEN
        DBMS_OUTPUT.PUT_LINE('THERE IS AN ERROR IN YOUR PAYMENT POS MACHINE');
END;

EXECUTE GET_MONEY_INPOSID_USEDBY_AT('222222','16-MAY-2021');

CREATE OR REPLACE PROCEDURE MAKE_PAYMENT(
    CASHIER_NIK IN VARCHAR2,
    I_PAYMENT_METHOD IN VARCHAR2,
    I_TOTAL_PURCHASED IN DECIMAL,
    I_PAID_AMOUNT IN DECIMAL,
    I_TABLE_NAME IN VARCHAR2
)AS
    V_ORDER_ID NUMERIC;
    V_TOTAL DECIMAL;
    V_TEMP_DATE DATE;
BEGIN
    SELECT ORDER_ID, SUM(SUBTOTAL),DATE_INPUT INTO V_ORDER_ID,V_TOTAL,V_TEMP_DATE
    FROM CUST_MAST_ORDER MO
    JOIN CUST_DETAIL_ORDER DO ON DO.MAST_ORDER_ID=MO.ORDER_ID
    JOIN REST_DETAIL_INVENTORY ON MO.TABLE_ID=REST_DETAIL_INVENTORY.ID
    WHERE INVT_NAME=I_TABLE_NAME AND PAYMENT_STATUS='UNCOMPLETED'
    GROUP BY ORDER_ID,DATE_INPUT;
        CASHIER_MUST_ABSENTPOS(CASHIER_NIK,V_ORDER_ID,V_TOTAL,V_TEMP_DATE,I_PAYMENT_METHOD,I_PAID_AMOUNT,I_TOTAL_PURCHASED);
        
    EXCEPTION 
        WHEN NO_DATA_FOUND
        THEN
            DBMS_OUTPUT.PUT_LINE('SORRY ORDER ID NOT FOUND');
END;

CREATE OR REPLACE PROCEDURE CASHIER_MUST_ABSENTPOS(
    CASHIER_NIK IN VARCHAR2,
    V_ORDER_ID NUMERIC,
    V_TOTAL DECIMAL,
    V_TEMP_DATE IN DATE,
    I_PAYMENT_METHOD IN VARCHAR2,
    I_PAID_AMOUNT IN DECIMAL,
    I_TOTAL_PURCHASED IN DECIMAL
)AS
V_EMP_ID NUMERIC;
GET_CURRENT_TIMESTAMP TIMESTAMP;
BEGIN
    SELECT HR.ID INTO V_EMP_ID 
    FROM EMP_HR HR
    JOIN CASHIER_POS_RECORD CPR ON CPR.CASHIER_ID=HR.ID
    WHERE NIK=CASHIER_NIK AND TRUNC(CPR.INPUT_DATE)=TRUNC(V_TEMP_DATE) AND SIGN_OUT_OFFICE IS NULL;
    GET_CURRENT_TIMESTAMP:=CURRENT_TIMESTAMP;
    
        INSERT INTO CUST_DETAIL_PAYMENT(PIC_CASHIER,PAYMENT_METHOD,PAID_AMOUNT,PAID_ON,TOTAL_PURCHASED,TOTAL_MONEY_RETURN)
        VALUES(V_EMP_ID,I_PAYMENT_METHOD,I_PAID_AMOUNT,GET_CURRENT_TIMESTAMP,I_TOTAL_PURCHASED,I_PAID_AMOUNT-I_TOTAL_PURCHASED);
        COMMIT;
    
        INSERT INTO CUST_ORDER_PAYMENT(TRANSACTION_ID,ORDER_ID,PAID_ON)
        SELECT TRANSACTION_ID,V_ORDER_ID, PAID_ON
        FROM CUST_DETAIL_PAYMENT WHERE PAID_ON=GET_CURRENT_TIMESTAMP;
        COMMIT;
    
        IF (V_TOTAL=I_PAID_AMOUNT OR V_TOTAL<I_PAID_AMOUNT) THEN
            UPDATE CUST_MAST_ORDER SET PAYMENT_STATUS='COMPLETED'
            WHERE ORDER_ID=V_ORDER_ID;
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('SUCCEED PAYMENT');
        END IF;
        
    EXCEPTION 
        WHEN NO_DATA_FOUND
        THEN
            DBMS_OUTPUT.PUT_LINE('SORRY YOU NEED TO ABSENT FIRST');
END;